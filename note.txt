Project programming concepts: 

Mainly based on: 

 -> Modular Programming Paradigm(Each file handles a specific functionality)
 -> feature-based Archirtecure- Customized MVC structure 
 -> Type-Driven Development
 -> Middleware Pattern

---------------------------------------------------------------------------

Value Space:
    - string - text data 
    - Int - whole number
    - bool - boolean - true and false 
    - object - collection of related data  

-----------------------------------------------------------------------------

Variables and Scoping

Local Scope: 
    Variable that can only be accessed inside a function 
     -> handleUserProfilePitcureMbile - line 28-31

Global Scope:
    Variable that can only be access through the component 
    -> handleUserProfilePitcureMbile - line 21 
    

Block Scope:
    Variable that can only be accessed inside a block
    -> handleUserProfilePitcureMbile - try-catch block
-----------------------------------------------------------------------------

Typing systems


Static & structured typing  => build in typescript
structured typing - cares about the shape

    -> tsconfig - enables strict type checking 

Custom Type Extensions:
    Extending Express's Request type with custom properties
    -> handleuserInterestData - line 10 

Enum Type for Error Codes
    -> Prisma Shema - Roles
    -> Error Codes: handleSignUp - line 30


Type Annotations- explicit declarations of the data type of a variable, function parameter, or return value in TypeScript
    -> handleFavorEvent - line 35
    -> prisma.shema 


------------------------------------------------------------------------------


Polymorphism

Inheritance-based Polymorphism
inherits properites from the Error class and adds new features (statuscode, funcionName)
    -> customErrors.ts 

Interface-based Polymorphism
it allows objects of different types to be treated as objects of a common type.
    -> hanleUserGifbgMobile -  extend the Express Request type, allowing different types of requests to be treated uniformly



--------------------------------------------------------------------------------


Functional Programming

Pure Function - Same input always produces same output - without side effect
    -> handleuserInterestData - validateRequest function
    -> decodingbtoa - line 21- handleDecoding

Impure Function - function - side effects or depend on external state. 
    -> handleProfilePictureMobileUpload - line 96
    -> getCurrentUserNotification - line 26

Anonaymous Function - anonymous functions (functions without names): 
    -> In handleuserInterestData.ts - line 66


-------------------------------------------------------------------------------


Higher Order funciton (Accept a function returnn a function)

Authentication Function 
    -> checksAuth - line 10 
    Takes a callback function as an argument 
    Returns a function that's immediately invoked


Promise-based Function 
    -> compromiseGif
    Takes callback functions (resolve, reject)
    Returns a Promise


Array Mapping Function 
    -> getCloseFriendsAccData - line 45
    takes a function as an argument.


Array Filter Function
    -> processUserFriendsInterests -line 131

File Processing Function
    -> processDirectory - callback function 

Recursive Function
    -> processDirectory calls itself when it finds a subdirectory





